import { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';
import Sequelize, { Model } from 'sequelize';

export default class User extends Model {
  static init(sequelizeConnection) {
    super.init({
      // http://krmannix.com/2017/05/23/postgres-autogenerated-uuids-with-sequelize/
      // An extension is required to allow postgress to set UUIDV$ as a default, defining the
      // defaultValue in the model is a workaround
      email: {
        type: Sequelize.STRING,
        unique: true,
      },
      password: Sequelize.STRING,
      firstName: Sequelize.STRING,
      lastName: Sequelize.STRING,
      role: {
        type: Sequelize.ENUM('admin', 'user'),
        allowNull: false,
        defaultValue: 'user',
      },
    },
    {
      sequelize: sequelizeConnection,
      hooks: {
        beforeCreate: this.beforeCreate,
      },
    });
    return User;
  }

  static beforeCreate(user): Promise<any> {
    return bcryptHash(user.getDataValue('password'), 10).then(hash => {
      user.setDataValue('password', hash);
      return user;
    });
  }

  password;

  checkPassword(plainTextPassword): Promise<boolean> {
    return bcryptCompare(plainTextPassword, this.password);
  }
}
